@model CodeCommunityFlow.ViewModels.EditUserPasswordViewModel
@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}




<div class="container mt-5">
    <h3>Change your passord</h3>
    <br />
    <form id="ChangePasswordForm" method="post" class="needs-validation" asp-action="ChangePassword" asp-controller="Account" novalidate>
        @Html.AntiForgeryToken()


        <div class="form-group col-md-6">
            <label for="Email"><b>Your Email: </b></label><br />
            <input type="hidden" value="@Model.Email" name="Email" />
            <span>@Model.Email</span>

        </div>

        <div class="form-group col-md-6">
            <label for="ppassword">Password</label>
            <input type="password" class="form-control" id="ppassword" name="Password" placeholder="Enter password" required />
            <div class="invalid-feedback">Password is required.</div>
        </div>

        <div class="form-group  col-md-6">
            <label for="pconfirmpassword">Confirm Password</label>
            @Html.PasswordFor(p => p.PasswordConfirm, new { id = "pconfirmpassword", @class = "form-control" })


            @*<input type="password" class="form-control" id="pconfirmpassword" name="PasswordConfirm" placeholder="Confirm password" required />*@
            <div class="invalid-feedback" id="confirm-feedback">Passwords do not match.</div>
        </div>

        @Html.ValidationSummary()
        <button type="submit" class="btn btn-primary">Update Password</button>
    </form>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {

        const form = document.getElementById("ChangePasswordForm");
        const passwordInput = document.getElementById("ppassword");
        const confirmPasswordInput = document.getElementById("pconfirmpassword");
        const confirmFeedback = document.getElementById("confirm-feedback");

        function validatePasswordRequired(input) {
            input.classList.remove("is-valid", "is-invalid");

            if (!input.value.trim()) {
                input.classList.add("is-invalid");
                return false;
            } else {
                input.classList.add("is-valid");
                return true;
            }
        }

        function validatePasswordMatch() {
            confirmPasswordInput.classList.remove("is-valid", "is-invalid");

            const confirmValue = confirmPasswordInput.value.trim();
            const passwordValue = passwordInput.value.trim();

            if (!confirmValue) {
                confirmPasswordInput.classList.add("is-invalid");
                confirmFeedback.textContent = "Please confirm your password.";
                return false;
            }

            if (confirmValue !== passwordValue) {
                confirmPasswordInput.classList.add("is-invalid");
                confirmFeedback.textContent = "Passwords do not match.";
                return false;
            }

            confirmPasswordInput.classList.add("is-valid");
            confirmFeedback.textContent = "";
            return true;
        }

        // Real-time typing validation
        [passwordInput, confirmPasswordInput].forEach(input => {
            input.addEventListener("input", () => {
                validatePasswordRequired(input);
                validatePasswordMatch();
            });
        });

        // Final check on submit
        form.addEventListener("submit", (e) => {
            let valid = true;

            if (!validatePasswordRequired(passwordInput)) valid = false;
            if (!validatePasswordRequired(confirmPasswordInput)) valid = false;
            if (!validatePasswordMatch()) valid = false;

            if (!valid) {
                e.preventDefault();
                e.stopPropagation();
            }
        });

    });
</script>
