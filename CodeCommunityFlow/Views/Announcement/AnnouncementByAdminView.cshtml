

@model CodeCommunityFlow.SelectList.SelectReportComment
@{
    ViewBag.Title = "Announcement By Admin";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*TempData when report successfully.*@

@if (TempData["SuccessReport"] != null)
{
    <div class="alert alert-success" id="successAlert">@TempData["SuccessReport"]</div>
}

@if (TempData["SuccessDeleteComment"] != null)
{
    <div class="alert alert-success" id="successAlert">@TempData["SuccessDeleteComment"]</div>
}


@* Whole container *@

<div class="container mt-5">

    <div class="col-xl-12 question-container">
        @* Announcement Section *@

        @if (Session["CurrentUserName"] != null)
        {
            @* Topic's Announcment *@
            <div class="col-md-12 bg-Announce">
                <h3 class="mb-3">@Model.AdminAnnounceTopic</h3>
            </div>
            <br />
            @* Announcement's Content Part *@
    <div class="col-md-12 border bg-AnnounceConent p-3">
        @* Top of Announcement's Content Status *@
        <div class="d-flex justify-content-between align-items-center flex-wrap mb-3 w-100 parents-of-vote">
            @* Left Side Announcement's status Consist of Category, UserName, UserImage, vote System *@
            <div class="d-flex align-items-center flex-wrap gap-3">
                <span class="badge badge-categoryAnnouncement" style="font-size: 16px; color: #ffffff;">@Model.Category</span>&nbsp;&nbsp;

                By&nbsp;<span class="badge badge-primary" style="font-size:16px; color:#ffffff;">@Model.AdminUsers.AdminName</span>&nbsp;&nbsp;


                <span class="text-muted">
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        @(Model.Description)
                    }
                </span>&nbsp;&nbsp;
                @* --- Vote Question ---*@
                @*User has logged in  *@
                @if (Session["CurrentUserName"] != null && Convert.ToInt32(Session["CurrentUserID"]) != null)
                {
                    <img src="~/Images/Buttons Arrow/@(Model.CurrentUserVoteType == 1 ? "green up" : "up").png"
                         class="btnUpVoteAnnouncement" style="cursor:pointer" width="30" height="30"
                         data-announceid="@Model.AdminAnnouncementID" data-adminid="@Model.AdminID" />
                    <img src="~/Images/Buttons Arrow/@(Model.CurrentUserVoteType == -1 ? "red down" : "down").png"
                         class="btnDownVoteAnnouncement" style="cursor:pointer" width="30" height="30"
                         data-announceid="@Model.AdminAnnouncementID" data-adminid="@Model.AdminID" />
                }
            </div>
            @*Right Side Announcement's Status Consist of Datetime, Comments Count, Vote Count *@
        <div class="d-flex align-items-center flex-wrap gap-3">

            <span class="text-muted">@Model.AnnouncementDateTime</span>&nbsp;&nbsp;

            @if (Model.VoteCount > 1)
            {
                <span class="badge badge-customVoteCount votecount">@Model.VoteCount Votes</span>
            }
            else
            {
                <span class="badge badge-customVoteCount votecount">@Model.VoteCount Vote</span>
            }&nbsp;&nbsp;



            @if (Model.CommentCount == 0)
            {
                <span class="text-danger">No any comments</span>
            }
            else if (Model.CommentCount > 1)
            {
                <span class="badge badge-AnswersCount">@Model.CommentFromAnnouncement.Count Comments</span>
            }
            else
            {
                <span class="badge badge-AnswersCount">@Model.CommentFromAnnouncement.Count Comment</span>
            }&nbsp;&nbsp;

            @if (Model.ViewCount > 1)
            {
                <span class="badge badge-ViewsCount">@Model.ViewCount Views</span>
            }
            else
            {
                <span class="badge badge-ViewsCount">@Model.ViewCount View</span>
            }




        </div>
        </div>
        @* Announcement Content Consist of Text and Images *@
        <hr />
        @*Code style displaying no indent *@

        <div class="text-left">
<pre class="p-3 rounded"><code class="language-html">
@Html.Raw(System.Net.WebUtility.HtmlEncode(Model.AdminAnnounceContent))
</code></pre></div>
            @* Image of Question's Content *@
            @if (!string.IsNullOrEmpty(Model.ImageContent))
            {
                var imagePaths = Model.ImageContent.Split(';');
                foreach (var path in imagePaths)
                {
                    <div class="my-2 d-flex justify-content-center">
                        <img src="@path" class="img-fluid rounded" style="max-width: 80%; height: auto;" />
                    </div>
                }
            }
        </div>
        <br />

        }
        else
        {
        @* User has'not logged in *@

        <div class="comment-display1">
            @* Annoucement's Topic *@
            <div class="col-md-12 border bg-Announce">
                <h3 class="mb-3">@Model.AdminAnnounceTopic</h3>
            </div>
            <br />
            @* Annoucement's Content *@
            <div class="col-md-12 border bg-AnnounceConent p-3">
                @* Top of the Question's Status '*@
                <div class="d-flex justify-content-between align-items-center flex-wrap mb-3">
                    @* Left Side Question's Status consist of Category, Username, UserImage, Vote *@
                    <div class="d-flex align-items-center flex-wrap gap-3">
                        <span class="badge badge-categoryAnnouncement" style="font-size:16px;color:#ffffff; ">@Model.Category</span>&nbsp;&nbsp;
                        By&nbsp;<span class="badge badge-primary" style="font-size:16px; color:#ffffff;">@Model.AdminUsers.AdminName</span>&nbsp;&nbsp;

                        <span class="text-muted">
                            @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                @(Model.Description)
                            }
                        </span>&nbsp;&nbsp;
                    </div>
                    @* Right Side Question Status Consist of Answer Count, View Count, Edit Button *@
                <div class="d-flex align-items-center flex-wrap gap-3">
                    <span class="text-muted">@Model.AnnouncementDateTime</span>&nbsp;&nbsp;



                    <span class="badge badge-customVoteCount votescount">@Model.VoteCount@(Model.VoteCount > 1? " Views" : " View")</span>&nbsp;&nbsp;



                    @if (Model.CommentCount == 0)
                    {
                        <span class="text-danger">No any comments</span>
                    }
                    else if (Model.CommentCount > 1)
                    {
                        <span class="badge badge-AnswersCount">@Model.CommentFromAnnouncement.Count Comments</span>
                    }
                    else
                    {
                        <span class="badge badge-AnswersCount">@Model.CommentFromAnnouncement.Count Comment</span>
                    }&nbsp;&nbsp;

                    <span class="badge badge-ViewsCount">@Model.ViewCount@(Model.ViewCount > 1? " Views" : " View")</span>&nbsp;&nbsp;

                </div>
                </div>

                <hr />
                @* User has not Logged in*@

                <div class="text-left">
<pre class="p-3 rounded"><code class="language-html">
@Html.Raw(System.Net.WebUtility.HtmlEncode(Model.AdminAnnounceContent))
</code></pre>
                </div>
                @* Image of Question Content *@
                @if (!string.IsNullOrEmpty(Model.ImageContent))
                {
                    var imagePaths = Model.ImageContent.Split(';');
                    foreach (var path in imagePaths)
                    {
                        <div class="my-2 d-flex justify-content-center">
                            <img src="@path" class="img-fluid rounded" style="max-width: 80%; height: auto;" />
                        </div>
                    }
                }


            </div>
            <br />
        </div>
        }
    </div>

    @* Comment Loop *@
    @*Comment Contents*@

    @for (int i = 0; i < Model.CommentFromAnnouncement.Count; i++)
    {
        var comment = Model.CommentFromAnnouncement[i];
        var isOwner = Convert.ToInt32(Session["CurrentUserID"]) == comment.UserID;
        var dropdownIdA = $"report-dropdown-{comment.CommentID}";
        var commentUser = comment.Users;

        @* Display user profile *@
        var imageFileNameAns = string.IsNullOrEmpty(commentUser?.ImageUser)
            ? Url.Content("~/Images/UsersImage/user.png")
            : Url.Content("~/Uploads/ImageUsers/" + commentUser.ImageUser);
        <div class="bg-white p-3 bg-answer border">

            <span class="badge badge-warning">Comment #@(i + 1)</span>

            @*Comment Status *@
            <div class="row">

                <div class="d-flex align-items-center flex-wrap gap-2">
                    @*span vote*@
                    &nbsp; &nbsp; <span class="badge badge-customVoteCount votescount">@(comment.VoteCount) @(comment.VoteCount > 1 ? " Votes" : " Vote")</span><br />  &nbsp; &nbsp;
                    @* --- Vote Comment ---*@
                    @* Check when user has logged in and is not Comment's onwer can vote and report Comment*@
                    @if (Session["CurrentUserName"] != null && !isOwner)
                    {
                        <img src="~/Images/Buttons Arrow/@(comment.CurrentUserVoteType == 1 ? "green up" : "up").png"
                             class="btnUpVoteComment" style="cursor:pointer" width="30" height="30"
                             data-commentid="@comment.CommentID" data-userid="@comment.UserID" />

                        <img src="~/Images/Buttons Arrow/@(comment.CurrentUserVoteType == -1 ? "red down" : "down").png"
                             class="btnDownVoteComment" style="cursor:pointer" width="30" height="30"
                             data-commentid="@comment.CommentID" data-userid="@comment.UserID" />

                        <div class="dropdown d-inline position-relative mt-2">
                            <button type="button" class="btn btn-sm report-toggle" data-target="#@dropdownIdA">
                                <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                            </button>
                            @*Report Comment*@
                            <div class="dropdown-menu custom-dropdown shadow" id="@dropdownIdA">
                                @if (Model.ReportReasonSelectList != null && Model.ReportReasonSelectList.Any())
                                {
                                    foreach (var reason in Model.ReportReasonSelectList)
                                    {
                                        <a class="dropdown-item report-reason"
                                           href="@Url.Action("ReportComment", "Announcement",new { commentId = comment.CommentID, reasonId = reason.Value,
                                                announceId = Model.AdminAnnouncementID, reportedUserId = comment.UserID })">
                                            @reason.Text
                                        </a>
                                    }
                                }
                                else
                                {
                                    <span class="dropdown-item text-muted">No reasons found</span>
                                }
                            </div>

                        </div>
                    }&nbsp; &nbsp;

                </div>
            </div>

            @* Comment Content *@
            <div class="col-md-12 comment-container">
                <div class="comment-display">
                    <p>@comment.CommentContent</p>

                    @* Comment Image *@
                    @if (!string.IsNullOrEmpty(comment.Image))
                    {
                        var imagePaths = comment.Image.Split(';');
                        foreach (var path in imagePaths)
                        {
                            if (!string.IsNullOrWhiteSpace(path))
                            {
                                <div class="col-12 d-flex justify-content-center my-3">
                                    <img src="@path" class="img-fluid rounded" style="max-width: 80%; height: auto;" />
                                </div>
                            }
                        }
                    }
                </div>
                @* You are Owner Comment *@
                @if (isOwner)
                {

                    <button class="btn btn-warning editbutton">Edit Your Comment</button>
                    <span>&nbsp;</span>
                    <button class="btn btn-danger delete-commentbutton"
                            type="button"
                            data-toggle="modal"
                            data-target="#deleteCommentModal"
                            data-comment-id="@comment.CommentID">
                        Delete Your Comment
                    </button>



                    <form class="needs-validation FormShowComment d-none" action="@Url.Action("EditComment", "Announcement")"
                          method="post" enctype="multipart/form-data" novalidate="novalidate">
                        <div class="form-group form-row">
                            <div class="col-sm-12">

                                <h4>Update your Comment</h4>

                                @Html.AntiForgeryToken()
                                <input type="hidden" name="CommentID" value="@comment.CommentID" />
                                <input type="hidden" name="AdminAnnouncementID" value="@comment.AdminAnnouncementID" />
                                <input type="hidden" name="VoteCount" value="@comment.VoteCount" />

                                <div class="form-group">
                                    <textarea class="form-control" rows="5" name="CommentContent"
                                              onclick="modalWarning()" required>@comment.CommentContent</textarea>

                                    @* Show Image and Checkbox to delete image *@
                                    @if (!string.IsNullOrEmpty(comment.Image))
                                    {
                                        var imgPaths = comment.Image.Split(';');
                                        int imgIndex = 0;
                                        foreach (var img in imgPaths)
                                        {
                                            if (!string.IsNullOrWhiteSpace(img))
                                            {
                                                var checkboxId = $"delete_{i}_{imgIndex}";
                                                <div class="my-2 d-flex justify-content-center">
                                                    <img src="@img" class="img-fluid rounded" style="max-width: 50%; height: auto;" />
                                                </div>
                                                <div class="form-check mt-1">
                                                    <input type="checkbox" class="form-check-input"
                                                           name="CheckDeleteImage[]" value="@img" id="@checkboxId" />
                                                    <label class="form-check-label" for="@checkboxId">Delete this image</label>
                                                </div>
                                                <hr />
                                                imgIndex++;
                                            }
                                        }

                                        <input type="hidden" name="ImageOld" value="@comment.Image" />
                                    }

                                    <div class="invalid-feedback d-none" id="invalidMsg">Please enter your comment</div>

                                </div>

                                <div class="form-group">
                                    <label>Select files to upload (optional):</label>
                                    <input type="file" name="Files" multiple class="form-control" />
                                </div>
                            </div>
                            <div class="form-group d-flex justify-content-start align-items-center mt-2">
                                <button type="submit" class="btn btn-primary mr-2">Update Comment</button>
                                @* Prevent form action when cancel edit*@
                                <button type="button" class="btn btn-danger d-none cancelbutton">Cancel</button>
                            </div>


                            @Html.ValidationSummary()
                        </div>

                    </form>

                }
            </div>
            @* Space below table's table *@
            <div class="row mt-2 align-items-center">
                <div class="col-auto">
                    @if (isOwner)
                    {
                        <a href="/Account/MyProfile">By You</a>
                    }
                    else if (commentUser != null)
                    {
                        <a href="@Url.Action("UserDetails", "Account", new { id = commentUser.UserID })">
                            By @commentUser.UserName
                        </a>
                    }
                    else
                    {
                        <span>By Unknown</span>
                    }

                    <img src="@imageFileNameAns" width="30" class="rounded ml-2" />&nbsp;&nbsp;

                    <span class="text-muted">@comment.Description</span>
                </div>

                <div class="col text-right text-muted">

                    @comment.CommentDateTime
                </div>



            </div>
        </div>



        <br />
    }

    @* Add Comment Form *@
    <div class="col-sm-12 bg-commentform">
        @if (Session["CurrentUserName"] != null)
        {
           

            <form method="post" action="@Url.Action("AddComment", "Announcement")" class="needs-validation addComment" novalidate enctype="multipart/form-data">
                <div class="form-group">
                    <h4>Add your Comment</h4>
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="AdminAnnouncementID" value="@Model.AdminAnnouncementID" />
                    <textarea class="form-control"
                              name="CommentContent"
                              placeholder="Enter your comment"
                              onclick="modalWarning()"
                              required
                              rows="5"></textarea>

                    <div class="invalid-feedback d-none">Please enter your commet</div>

                    <br />
                    <p>Select files to upload (optional):</p>
                    <input type="file" name="Files" multiple class="form-control" />

                    <button type="submit" class="btn btn-primary mt-3">Add your Commet</button>
                    @Html.ValidationSummary()
                </div>
            </form>


        }

    </div>
</div>


<!---Modal Warning Comment-->
<div class="modal fade" id="ModalWarning">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h4 class="modal-title">Please Read Before Answer the Question</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body mx-auto">
                <p style="text-indent:1.5rem">We encourage you to help someone with your knowledge and information, but please read about CodeCommunityFlow's rules</p>
                <p>1. Use polite words and sentences.</p>
                <p>2. Do not attack someone if you see just a basic issue or fundamental questions. We emphasize to use of appropriate words and sentences; therefore, do not forget the 1st rule, please be polite.</p>
                <p>3. Please respect each other and maintain a community atmosphere. </p>
                <p>4. Do not mention to 3rd parties in negative way</p>
                <p>5. Do not post something related to hate speech to others</p>
                <p>6. Do not post topics about sexuality or nudity</p>
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-primary mx-auto" data-dismiss="modal">OK, I accept the rules</button>
            </div>
        </div>
    </div>
</div>


<!-- Delete Comment Confirmation Modal -->

<div class="modal fade" id="deleteCommentModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete your comment?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <a id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>


<style>
    .valid-feedback,
    .invalid-feedback {
        display: block;
        margin-top: 5px;
        font-weight: 600;
    }


    .answer-container pre {
        text-align: left;
        white-space: pre-wrap;
        word-break: break-word;
    }




    .code-block-no-indent code {
        background: none;
        padding: 0;
        margin: 0;
        border: none;
        display: block;
    }
</style>




<script>
    $(document).ready(function () {

        const forms = document.querySelectorAll(".needs-validation");

        forms.forEach(function (form) {
            const textarea = form.querySelector("textarea[name='CommentContent']");
            const invalidMsg = form.querySelector(".invalid-feedback");
            const validMsg = form.querySelector(".valid-feedback");

            form.addEventListener("submit", function (e) {
                console.log("Submit triggered...");
                if (!textarea.value.trim()) {
                    e.preventDefault();
                    textarea.classList.add("is-invalid");
                    textarea.classList.remove("is-valid");
                    invalidMsg.classList.remove("d-none");
                    validMsg.classList.add("d-none");
                    console.log("Empty textarea - showing error");
                }
            });

            textarea.addEventListener("input", function () {
                if (textarea.value.trim()) {
                    textarea.classList.add("is-valid");
                    textarea.classList.remove("is-invalid");
                    validMsg.classList.remove("d-none");
                    invalidMsg.classList.add("d-none");
                    console.log("Valid input typed");
                } else {
                    textarea.classList.add("is-invalid");
                    textarea.classList.remove("is-valid");
                    invalidMsg.classList.remove("d-none");
                    validMsg.classList.add("d-none");
                    console.log("Input cleared - showing error");
                }
            });
        });


        // Vote Comment - Up
        $(".btnUpVoteComment").click(function () {
            var UpBtn = $(this);
            var DownBtn = UpBtn.parent().find(".btnDownVoteComment");
            var voteSpan = UpBtn.parent().find(".votescount");
            var userId = UpBtn.data("userid");
            var value;

            if (UpBtn.attr("src") === "/Images/Buttons Arrow/up.png") {
                if (DownBtn.attr("src") === "/Images/Buttons Arrow/down.png")
                    value = 1;
                else
                    value = 2;

                $.ajax({
                    url: "/api/vote/UpdateVoteComment?commentid=" + UpBtn.data("commentid") + "&value=" + value + "&userId=" + userId,
                    type: "POST",
                    success: function () {
                        let current = parseInt(voteSpan.text()) || 0;
                        let newVote = current + value;
                        voteSpan.text(newVote + " Votes");
                        UpBtn.attr("src", "/Images/Buttons Arrow/green up.png");
                        DownBtn.attr("src", "/Images/Buttons Arrow/down.png");
                    }
                });
            }
        });

        // Vote Answer - Down
        $(".btnDownVoteComment").click(function () {
            var DownBtn = $(this);
            var UpBtn = DownBtn.parent().find(".btnUpVoteComment");
            var voteSpan = DownBtn.parent().find(".votescount");
            var userId = DownBtn.data("userid");
            var value;

            if (DownBtn.attr("src") === "/Images/Buttons Arrow/down.png") {
                if (UpBtn.attr("src") === "/Images/Buttons Arrow/up.png")
                    value = -1;
                else
                    value = -2;

                $.ajax({
                    url: "/api/vote/UpdateVoteComment?commentid=" + DownBtn.data("commentid") + "&value=" + value + "&userId=" + userId,
                    type: "POST",
                    success: function () {
                        let current = parseInt(voteSpan.text()) || 0;
                        let newVote = current + value;
                        voteSpan.text(newVote + " Votes");
                        DownBtn.attr("src", "/Images/Buttons Arrow/red down.png");
                        UpBtn.attr("src", "/Images/Buttons Arrow/up.png");
                    }
                });
            }
        });

        // Vote Announcement - Up
        $(".btnUpVoteAnnouncement").click(function () {
            var UpBtn = $(this);
            var container = UpBtn.closest(".parents-of-vote");
            var DownBtn = container.find(".btnDownVoteAnnouncement");
            var voteCountLabel = container.find(".votecount");
            var adminId = UpBtn.data("adminid");
            var value;

            if (UpBtn.attr("src") === "/Images/Buttons Arrow/up.png") {
                if (DownBtn.attr("src") === "/Images/Buttons Arrow/down.png")
                    value = 1;
                else
                    value = 2;

                $.ajax({
                    url: "/api/vote/UpdateVoteAnnounce?announceid=" + UpBtn.data("announceid") + "&value=" + value + "&adminId=" + adminId,
                    type: "POST",
                    success: function () {
                        var currentCount = parseInt(voteCountLabel.text().replace(/\D/g, '')) || 0;
                        var newCount = currentCount + value;
                        voteCountLabel.text(newCount + " Votes");
                        UpBtn.attr("src", "/Images/Buttons Arrow/green up.png");
                        DownBtn.attr("src", "/Images/Buttons Arrow/down.png");
                    },
                    error: function (xhr) {
                        alert("Error: Unable to upvote. " + xhr.statusText);
                    }
                });
            }
        });

        // Vote Announcement - Down
        $(".btnDownVoteAnnouncement").click(function () {
            var DownBtn = $(this);
            var UpBtn = DownBtn.closest(".parents-of-vote").find(".btnUpVoteAnnouncement");
            var voteCountLabel = DownBtn.closest(".parents-of-vote").find(".votecount");
            var adminId = UpBtn.data("adminid");
            var value;

            if (DownBtn.attr("src") === "/Images/Buttons Arrow/down.png") {
                if (UpBtn.attr("src") === "/Images/Buttons Arrow/up.png")
                    value = -1;
                else
                    value = -2;

                $.ajax({
                    url: "/api/vote/UpdateVoteAnnounce?announceid=" + UpBtn.data("announceid") + "&value=" + value + "&adminId=" + adminId,
                    type: "POST",
                    success: function () {
                        var currentCount = parseInt(voteCountLabel.text().replace(/\D/g, '')) || 0;
                        var newCount = currentCount + value;
                        voteCountLabel.text(newCount + " Votes");
                        DownBtn.attr("src", "/Images/Buttons Arrow/red down.png");
                        UpBtn.attr("src", "/Images/Buttons Arrow/up.png");
                    }
                });
            }
        });

    }); // end document.ready

    // Edit Answer
    $(document).on("click", ".editbutton", function () {
        var container = $(this).closest(".comment-container");
      
        container.find(".FormShowComment").removeClass("d-none").show();
        container.find(".comment-display").hide();
        container.find(".editbutton").hide();
        container.find(".delete-commentbutton").hide();
        container.find(".cancelbutton").removeClass("d-none").show();
        $(".bg-commentform .addComment").addClass("d-none").hide();
    });


    // Cancel
    $(document).on("click", ".cancelbutton", function () {
        var container = $(this).closest(".comment-container");
        container.find(".FormShowComment").addClass("d-none").hide();
        container.find(".comment-display").show();
        container.find(".editbutton").show();
        container.find(".delete-commentbutton").show();
        container.find(".cancelbutton").addClass("d-none").hide();
    });

    // Show modal once
    var modalShown = false;
    window.modalWarning = function () {
        if (!modalShown) {
            $('#ModalWarning').modal('show');
            modalShown = true;
        }
    };

    // Tempdata alert
    setTimeout(function () {
        var alert = document.getElementById("successAlert");
        if (alert) {
            alert.classList.remove("show");
            alert.classList.add("fade");
            alert.style.opacity = 0;
            setTimeout(() => alert.remove(), 500);
        }
    }, 3000);

    // Delete Question Modal
    $('#deleteCommentModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var commentId = button.data('comment-id');
        var deleteUrl = '/Announcement/DeleteComment/' + commentId;
        var modal = $(this);
        modal.find('#confirmDeleteBtn').attr('href', deleteUrl);
    });

    $(document).ready(function () {

        $('.report-toggle').on('click', function (e) {
            e.preventDefault()
            e.stopPropagation()

            var targetSelector = $(this).data('target')
            var $targetDropdown = $(targetSelector)

            $('.custom-dropdown').not($targetDropdown).hide(); // Hide all others
            $targetDropdown.toggle(); // Toggle current
        });

        // Click outside to close
        $(document).on('click', function () {
            $('.custom-dropdown').hide()
        });

        // Prevent dropdown click from closing itself
        $('.custom-dropdown').on('click', function (e) {
            e.stopPropagation()
        });

        // Report reason click
        $(document).on('click', '.report-reason', function () {
            var reasonId = $(this).data('reason-id');
            console.log(("You selected reason ID: " + reasonId))
            $('.custom-dropdown').hide();
        });
    });
</script>


